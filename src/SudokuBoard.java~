import java.awt.BorderLayout;
import java.awt.EventQueue;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;
import java.awt.GridLayout;
import javax.swing.JButton;
import java.awt.Color;
import javax.swing.border.LineBorder;
import java.awt.Font;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.FocusAdapter;
import java.awt.event.FocusEvent;
import javax.swing.JToggleButton;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Scanner;

import javax.swing.JLabel;
import javax.swing.JCheckBox;


public class SudokuBoard extends JFrame {

	private JPanel contentPane;
	private JToggleButton[][] gameSpaces;
	private int[][] gameSoFar;
	private boolean SolutionIsvalid;
	private JLabel validityLabel;
	private final File saveFile = new File("SudokuSave");
	private JCheckBox guessCheckBox;
	private JLabel elapsedTimeLabel;
	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					SudokuBoard frame = new SudokuBoard();
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

	/**
	 * Create the frame.
	 */
	private void updateSpace(String newNumber) {
		for (int row=0;row<9;row++) {
			for (int column=0;column<9;column++) {
				if (this.gameSpaces[row][column].isFocusOwner()) {
					this.gameSpaces[row][column].setText(newNumber);
					if (newNumber.equals("")) {
						this.gameSoFar[row][column] = 0;
					}
					else {
						int val = Integer.parseInt(newNumber);
						if (val > 0 && val < 10) {
							this.gameSoFar[row][column] = val;
						}
					}
				}
			}
		}
	}
	private void upFocus() {
		for (int row=0;row<9;row++) {
			for (int column=0;column<9;column++) {
				if (this.gameSpaces[row][column].isFocusOwner()) {
					if (row > 0) {
						this.gameSpaces[row-1][column].requestFocus();
					}
				}
			}
		}
	}
	private void downFocus() {
		for (int row=0;row<9;row++) {
			for (int column=0;column<9;column++) {
				if (this.gameSpaces[row][column].isFocusOwner()) {
					if (row < 9) {
						this.gameSpaces[row+1][column].requestFocus();
					}
				}
			}
		}
	}
	private void rightFocus() {
		for (int row=0;row<9;row++) {
			for (int column=0;column<9;column++) {
				if (this.gameSpaces[row][column].isFocusOwner()) {
					if (column < 9) {
						this.gameSpaces[row][column+1].requestFocus();
					}
				}
			}
		}
	}
	private void leftFocus() {
		for (int row=0;row<9;row++) {
			for (int column=0;column<9;column++) {
				if (this.gameSpaces[row][column].isFocusOwner()) {
					if (column > 0) {
						this.gameSpaces[row][column-1].requestFocus();
					}
				}
			}
		}
	}
	private void updateSpacesFromData() {
		for (int row=0;row<9;row++) {
			for (int column = 0;column<9;column++) {
				if(this.gameSoFar[row][column] == 0) {
					this.gameSpaces[row][column].setText("");
				}
				else {
					this.gameSpaces[row][column].setText(Integer.toString(this.gameSoFar[row][column]));
				}
			}
		}
	}
	private void solve() {
		long before = System.currentTimeMillis();
		Solver slvr = new Solver(false);
		if (this.guessCheckBox.isSelected()) {
			slvr = new Solver(true);
		}
		this.gameSoFar = slvr.Solve(this.gameSoFar);
		long after = System.currentTimeMillis();
		this.updateSpacesFromData();
		if (slvr.isSolutionValid()) {
			this.validityLabel.setText("Valid");
		}		
		else {
			this.validityLabel.setText("NotValid");			
		}
		this.elapsedTimeLabel.setText(Long.toString(after - before) + " miliseconds");
	}
	private void toggleSelected(boolean selected) {	
		if (!selected) {
			for (int row=0;row<9;row++) {
				for (int column=0;column<9;column++) {
					if (this.gameSpaces[row][column].isSelected()) {
						this.gameSpaces[row][column].setSelected(false);
					}
				}
			}
		}
		for (int row=0;row<9;row++) {
			for (int column=0;column<9;column++) {
				if (this.gameSpaces[row][column].isFocusOwner()) {
					this.gameSpaces[row][column].setSelected(selected);
					//break;
				}
			}
		}
	}
	private void save() throws IOException {	
			if (saveFile.exists()) {
				saveFile.delete();
			}
			saveFile.createNewFile();
			FileWriter fw;
			fw = new FileWriter(saveFile,true);
			for (int row=0;row<this.gameSoFar.length;row++) {
				String line = "|";
				for (int column=0;column<this.gameSoFar[row].length;column++) {					
					if (column<this.gameSoFar[row].length -1) {
						line = line + this.gameSoFar[row][column] + "|";
					}
					else {
						line = line + this.gameSoFar[row][column] + "|" + "\n";
					}
				}
				fw.write(line);			
			}
			fw.close();
	}
	private void load() throws FileNotFoundException {
		if (saveFile.exists()) {
			int[][] outArray = new int[9][9];
			Scanner arrayScan = new Scanner(saveFile);							
			String[] rows = new String[9];
			for (int row=0;row<rows.length;row++) {
				rows[row] = "empty";
			}
			while (arrayScan.hasNextLine()) {
				for (int row=0;row<rows.length;row++) {
					if (rows[row].equals("empty")) {
						rows[row] = arrayScan.nextLine();
						break;
					}
				}
			}
			arrayScan.close();
			for (int row=0;row<rows.length;row++) {
				int count = 0;
				Scanner rowScan = new Scanner(rows[row]);
				rowScan.useDelimiter("|");
				while (rowScan.hasNext()) {	
					String next = rowScan.next();		
					if (!next.equals("|")) {
						outArray[row][count] = Integer.parseInt(next);
						count++;
					}
				}
				rowScan.close();
			}
			this.gameSoFar = outArray;
			this.updateSpacesFromData();
		}
	}
	private void blanc() {
		this.gameSoFar = new int[9][9];
		this.SolutionIsvalid = true;
		this.validityLabel.setText("Valid");
		this.updateSpacesFromData();
	}
	public SudokuBoard() {
		setResizable(false);
		this.gameSoFar = new int[9][9];
		//int[][] gameSoFartemp  = new int[][] {{0,0,3,1,0,4,0,5,0},{6,8,0,3,0,0,2,7,0},{0,5,0,7,0,2,0,0,1},{2,0,6,0,0,0,8,1,7},{0,0,0,0,0,0,0,0,0},{5,4,8,0,0,0,6,0,9},{8,0,0,9,0,1,0,2,0},{0,7,4,0,0,3,0,6,8},{0,3,0,6,0,8,4,0,0}};	
		//this.gameSoFar = gameSoFartemp;
		this.gameSpaces = new JToggleButton[9][9];
		this.SolutionIsvalid = true;
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(100, 100, 659, 639);
		contentPane = new JPanel();
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
		setContentPane(contentPane);
		contentPane.setLayout(null);
		
		JPanel gamePanel = new JPanel();
		gamePanel.setBounds(12, 12, 540, 540);
		contentPane.add(gamePanel);
		gamePanel.setLayout(new GridLayout(0, 9, 0, 0));
		
		JButton btnNewButton_1 = new JButton("Solve");
		btnNewButton_1.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseReleased(MouseEvent e) {
				solve();
			}
		});
		btnNewButton_1.setBounds(564, 165, 80, 58);
		contentPane.add(btnNewButton_1);
		
		JLabel lblValid = new JLabel("Valid");
		lblValid.setBounds(570, 130, 87, 23);
		contentPane.add(lblValid);
		this.validityLabel = lblValid;
		
		JButton btnSave = new JButton("Save");
		btnSave.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseReleased(MouseEvent e) {
				try {
					save();
				} catch (IOException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
			}
		});
		btnSave.setBounds(564, 235, 80, 58);
		contentPane.add(btnSave);
		
		JButton btnLoad = new JButton("Load");
		btnLoad.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseReleased(MouseEvent e) {
				try {
					load();
				} catch (FileNotFoundException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
			}
		});
		btnLoad.setBounds(564, 305, 80, 58);
		contentPane.add(btnLoad);
		
		JButton btnBlank = new JButton("Blank");
		btnBlank.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseReleased(MouseEvent e) {
				blanc();
			}
		});
		btnBlank.setBounds(564, 375, 80, 58);
		contentPane.add(btnBlank);
		
		JCheckBox chckbxGuess = new JCheckBox("Guess");
		chckbxGuess.setBounds(560, 458, 129, 23);
		this.guessCheckBox = chckbxGuess;
		contentPane.add(chckbxGuess);
		
		JLabel lblElapsedTime = new JLabel("Elapsed Time:");
		lblElapsedTime.setBounds(36, 583, 115, 15);
		contentPane.add(lblElapsedTime);
		this.elapsedTimeLabel = lblElapsedTime;
		
		JLabel lElapsedTimeLabel = new JLabel("");
		lElapsedTimeLabel.setBounds(155, 583, 270, 15);
		contentPane.add(lElapsedTimeLabel);
			
		for (int row=0;row<9;row++) {
			for (int column=0;column<9;column++) {
				JToggleButton btnNewButton = new JToggleButton("");				
				btnNewButton.setFont(new Font("Dialog", Font.BOLD, 27));
				btnNewButton.setBorder(new LineBorder(new Color(0, 0, 0), 3));
				btnNewButton.setBackground(Color.WHITE);
				btnNewButton.setBounds(0, 0, 60, 60);
				gamePanel.add(btnNewButton);
				this.gameSpaces[row][column] = btnNewButton;
				btnNewButton.addFocusListener(new FocusAdapter() {
					@Override
					public void focusGained(FocusEvent e) {
						toggleSelected(true);
					}
					@Override
					public void focusLost(FocusEvent e) {
						toggleSelected(false);
					}
				});
				btnNewButton.addKeyListener(new KeyAdapter() {
					@Override
					public void keyTyped(KeyEvent e) {					
						char number = e.getKeyChar();
						if (Character.isDigit(number)) {
							String numText = Character.toString(number);
							int val = Integer.parseInt(numText);
							if (val == 0) {
								numText = "";								
							}
							if (val>-1 && val <10) {
								updateSpace(numText);
							}
						}
					}
					public void keyReleased(KeyEvent e) {					
						if (e.getKeyCode() == KeyEvent.VK_DOWN) {
							downFocus();														
						}
						else if (e.getKeyCode() == KeyEvent.VK_RIGHT) {
							rightFocus();														
						}
						else if (e.getKeyCode() == KeyEvent.VK_LEFT) {
							leftFocus();														
						}
						else if (e.getKeyCode() == KeyEvent.VK_UP) {
							upFocus();														
						}
					}
				});
			}
		}
		this.updateSpacesFromData();
	}
}
